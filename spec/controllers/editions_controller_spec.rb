require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe EditionsController, type: :controller do

  context 'not logged in' do
   
    it 'cannot go anywhere' do
      get :index
      expect(response).to redirect_to(new_admin_account_session_path)
    end

  end

  context 'logged in as normal user' do

    login_account
   
    it 'cannot go anywhere' do
      get :index
      expect(response).to redirect_to(new_admin_account_session_path)
    end

  end

  context 'logged in as administrator' do

    login_admin_account
  
    before :example do
      @year = Forgery(:date).year(past: true, max_delta: 10, min_delta: 2)
      @start_date = Time.new(@year) + Forgery(:basic).number(at_least: 250, at_most: 310).days
      @end_date   = @start_date + Forgery(:basic).number(at_least: 4, at_most: 15).days
      @submission_deadline = @start_date - 5.months
      clear_past_editions
    end
  
    # This should return the minimal set of attributes required to create a valid
    # Edition. As you add validations to Edition, be sure to
    # adjust the attributes here as well.
    let(:valid_attributes) {
      HashWithIndifferentAccess.new(year: @year, title: Forgery(:emuform).title, start_date: @start_date, end_date: @end_date,
                                    description_en: Forgery(:lorem_ipsum).sentences(5),
                                    description_it: Forgery(:lorem_ipsum).sentences(5),
                                    submission_deadline: @submission_deadline,
      )
    }
  
    let(:invalid_attributes) {
      HashWithIndifferentAccess.new(year: '', title: '', start_date: @start_date, end_date: @end_date,
                                    description_en: Forgery(:lorem_ipsum).sentences(5),
                                    description_it: Forgery(:lorem_ipsum).sentences(5),
                                    submission_deadline: @submission_deadline,
      )
    }
  
    # This should return the minimal set of values that should be in the session
    # in order to pass any filters (e.g. authentication) defined in
    # EditionsController. Be sure to keep this updated too.
    let(:valid_session) { {} }
  
    describe "GET #index" do
      it "assigns all editions as @editions" do
        edition = Edition.switch! valid_attributes
        get :index, {}, valid_session
        editions = Edition.all.to_a
        expect(assigns(:editions)).to eq(editions)
      end
    end
  
    describe "GET #show" do
      it "assigns the requested edition as @edition" do
        edition = Edition.switch! valid_attributes
        get :show, {:id => edition.to_param}, valid_session
        expect(assigns(:edition)).to eq(edition)
      end
    end
  
    describe "GET #new" do
      it "assigns a new edition as @edition" do
        get :new, {}, valid_session
        expect(assigns(:edition)).to be_a_new(Edition)
      end
    end
  
    describe "GET #edit" do
      it "assigns the requested edition as @edition" do
        edition = Edition.switch! valid_attributes
        get :edit, {:id => edition.to_param}, valid_session
        expect(assigns(:edition)).to eq(edition)
      end
    end
  
    describe "POST #create" do
      context "with valid params" do
        it "creates a new Edition" do
          expect {
            post :create, {:edition => valid_attributes}, valid_session
          }.to change(Edition, :count).by(1)
        end
  
        it "assigns a newly created edition as @edition" do
          post :create, {:edition => valid_attributes}, valid_session
          expect(assigns(:edition)).to be_a(Edition)
          expect(assigns(:edition)).to be_persisted
        end
  
        it "redirects to the created edition" do
          post :create, {:edition => valid_attributes}, valid_session
          expect(response).to redirect_to(Edition.last)
        end
      end
  
      context "with invalid params" do
        it "assigns a newly created but unsaved edition as @edition" do
          post :create, {:edition => invalid_attributes}, valid_session
          expect(assigns(:edition)).to be_a_new(Edition)
        end
  
        it "re-renders the 'new' template" do
          post :create, {:edition => invalid_attributes}, valid_session
          expect(response).to redirect_to(new_edition_path)
        end
      end
    end
  
    describe "PUT #update" do
      context "with valid params" do
        let(:new_attributes) {
          HashWithIndifferentAccess.new(year: @year, title: Forgery(:emuform).title, start_date: @start_date, end_date: @end_date,
                                    description_en: Forgery(:lorem_ipsum).sentences(5),
                                    description_it: Forgery(:lorem_ipsum).sentences(5),
                                    submission_deadline: @submission_deadline,
          )
        }
  
        it "updates the requested edition" do
          edition = Edition.switch! valid_attributes
          put :update, {:id => edition.to_param, :edition => new_attributes}, valid_session
          edition.reload
          new_attributes.each { |k, v| expect(edition.send(k)).to eq(v) }
        end
  
        it "assigns the requested edition as @edition" do
          edition = Edition.switch! valid_attributes
          put :update, {:id => edition.to_param, :edition => valid_attributes}, valid_session
          expect(assigns(:edition)).to eq(edition)
        end
  
        it "redirects to the edition" do
          edition = Edition.switch! valid_attributes
          put :update, {:id => edition.to_param, :edition => valid_attributes}, valid_session
          expect(response).to redirect_to(edition)
        end
      end
  
      context "with invalid params" do
        it "assigns the edition as @edition" do
          edition = Edition.switch! valid_attributes
          put :update, {:id => edition.to_param, :edition => invalid_attributes}, valid_session
          expect(assigns(:edition)).to eq(edition)
        end
  
        it "re-renders the 'edit' template" do
          edition = Edition.switch! valid_attributes
          put :update, {:id => edition.to_param, :edition => invalid_attributes}, valid_session
          expect(response).to render_template("edit")
        end
      end
    end
  
    describe "DELETE #destroy" do
      it "destroys the requested edition" do
        edition = Edition.switch! valid_attributes
        expect {
          delete :destroy, {:id => edition.to_param}, valid_session
        }.to change(Edition, :count).by(-1)
      end
  
      it "redirects to the editions list" do
        edition = Edition.switch! valid_attributes
        delete :destroy, {:id => edition.to_param}, valid_session
        expect(response).to redirect_to(editions_url)
      end
    end

  end
  
  def clear_past_editions
    Edition.where('current = ?', :false).destroy_all
  end

end
