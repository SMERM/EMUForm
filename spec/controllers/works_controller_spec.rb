require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe WorksController, type: :controller do

  after :example do
    Work.destroy_all
  end

  # This should return the minimal set of attributes required to create a valid
  # Work. As you add validations to Work, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      :title => Forgery(:name).title,
      :'year(1i)' => Forgery(:basic).number(:at_least => 1850, :at_most => Time.zone.now.year).to_s, :'year(2i)' => '1', :'year(3i)' => '1',
      :'duration(1i)' => '1', :'duration(2i)' => '1', :'duration(3i)' => '1',
      :'duration(4i)' => '0', :'duration(5i)' => '4', :'duration(6i)' => '33',
      :instruments => 'pno, fl, cl',
      :program_notes_en => Forgery(:lorem_ipsum).paragraphs(Forgery(:basic).number(:at_least => 1, :at_most => 10)),
      :program_notes_it => Forgery(:lorem_ipsum).paragraphs(Forgery(:basic).number(:at_least => 1, :at_most => 10)),
    }
  }
  
  let(:invalid_attributes) {
    #
    # invalid because :title is empty and :non_existing_key does not exist
    #
    {
      :title => '', :'year(1i)' => '2016', :'year(2i)' => '1', :'year(3i)' => '1',
      :'duration(1i)' => '1', :'duration(2i)' => '1', :'duration(3i)' => '1',
      :'duration(4i)' => '0', :'duration(5i)' => '4', :'duration(6i)' => '33',
      :instruments => 'pno, fl, cl', :program_notes_en => 'Test notes',
      :program_notes_it => 'Note di Test', :non_existing_key => 'This key does not exist'
    }
  }

  let(:attribute_display_keys) {
    {
      :title => :title, :year => :display_year, :duration => :display_duration, :instruments => :instruments,
      :program_notes_en => :program_notes_en, :program_notes_it => :program_notes_it
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # WorksController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all works belonging to a given author as @works" do
      author = build_enviroment_with_a_single_work
      get :index, { :author_id => author.to_param }, valid_session
      expect(assigns(:works)).to eq(author.works)
    end
  end

  describe "GET #show" do
    it "assigns the requested work as @work" do
      author = build_enviroment_with_a_single_work
      work = author.works.create! valid_attributes
      get :show, {:author_id => author.to_param, :id => work.to_param}, valid_session
      expect(assigns(:work)).to eq(work)
    end
  end

  describe "GET #new" do
    it "assigns a new work as @work" do
      author = build_enviroment_with_a_single_work
      get :new, {:author_id => author.to_param}, valid_session
      expect(assigns(:work)).to be_a_new(Work)
    end
  end

  describe "GET #edit" do
    it "assigns the requested work as @work" do
      author = build_enviroment_with_a_single_work
      work = author.works.create! valid_attributes
      get :edit, {:author_id => author.to_param, :id => work.to_param}, valid_session
      expect(assigns(:work)).to eq(work)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Work" do
        author = build_enviroment_with_a_single_work
        num_attachments = 3
        attachments = FactoryGirl.create_list(:uploaded_file, num_attachments)
        args = HashWithIndifferentAccess.new
        args.update(valid_attributes)
        args.update(:submitted_files_attributes => attachments.map { |att| {:http_request => att} })
        expect {
          post :create, {:author_id => author.to_param, :work => args }, valid_session
        }.to change(Work, :count).by(1)
        expect((w = Work.last).valid?).to be(true)
        expect(w.submitted_files.count).to eq(num_attachments)
        expect(w.directory.blank?).to be(false)
        d = Dir.new(w.directory)
        n = 0; d.each { n += 1 }
        expect(n).to eq(num_attachments + 2) # this count includes also '.' and '..'
      end

      it "assigns a newly created work as @work" do
        author = build_enviroment_with_a_single_work
        post :create, {:author_id => author.to_param, :work => valid_attributes}, valid_session
        expect(assigns(:work)).to be_a(Work)
        expect(assigns(:work)).to be_persisted
      end

      it "redirects to the created work" do
        author = build_enviroment_with_a_single_work
        post :create, {:author_id => author.to_param, :work => valid_attributes}, valid_session
        expect(response).to redirect_to(author_url(author))
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved work as @work" do
        author = build_enviroment_with_a_single_work
        post :create, {:author_id => author.to_param, :work => invalid_attributes}, valid_session
        expect(assigns(:work)).to be_a_new(Work)
      end

      it "re-renders the 'new' template" do
        author = build_enviroment_with_a_single_work
        post :create, {:author_id => author.to_param, :work => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {
          :title => 'Updated ' + Forgery(:name).title,
          :'year(1i)' => Forgery(:basic).number(:at_least => 1850, :at_most => Time.zone.now.year).to_s, :'year(2i)' => '1', :'year(3i)' => '1',
          :'duration(1i)' => '1', :'duration(2i)' => '1', :'duration(3i)' => '1',
          :'duration(4i)' => '0', :'duration(5i)' => '4', :'duration(6i)' => '33',
          :instruments => 'pno, fl, cl',
          :program_notes_en => 'Updated ' + Forgery(:lorem_ipsum).paragraphs(Forgery(:basic).number(:at_least => 1, :at_most => 10)),
          :program_notes_it => 'Aggiornamento: ' + Forgery(:lorem_ipsum).paragraphs(Forgery(:basic).number(:at_least => 1, :at_most => 10)),
        }
      }

      it "updates the requested work" do
        author = build_enviroment_with_a_single_work
        work = author.works.first
        put :update, {:author_id => author.to_param, :id => work.to_param, :work => new_attributes}, valid_session
        work.reload
        expect(work.valid?).to be(true)
      end

      it "assigns the requested work as @work" do
        author = build_enviroment_with_a_single_work
        work = author.works.first
        put :update, {:author_id => author.to_param, :id => work.to_param, :work => valid_attributes}, valid_session
        expect(assigns(:work)).to eq(work)
      end

      it "redirects to the work" do
        author = build_enviroment_with_a_single_work
        work = author.works.first
        put :update, {:author_id => author.to_param, :id => work.to_param, :work => valid_attributes}, valid_session
        expect(response).to redirect_to(author_path(author))
      end
    end

    context "with invalid params" do
      it "assigns the work as @work" do
        author = build_enviroment_with_a_single_work
        work = author.works.first
        put :update, {:author_id => author.to_param, :id => work.to_param, :work => invalid_attributes}, valid_session
        expect(assigns(:work)).to eq(work)
      end

      it "re-renders the 'edit' template" do
        author = build_enviroment_with_a_single_work
        work = author.works.first
        put :update, {:author_id => author.to_param, :id => work.to_param, :work => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested work" do
      author = build_enviroment_with_a_single_work
      work = author.works.first
      expect {
        delete :destroy, {:id => work.to_param, :author_id => author.to_param, :work => work }, valid_session
      }.to change(Work, :count).by(-1)
    end

    it "redirects to the works list" do
      author = build_enviroment_with_a_single_work
      work = author.works.first
      delete :destroy, {:id => work.to_param, :author_id => author.to_param, :work => work }, valid_session
      expect(response).to redirect_to(author_path(author))
    end
  end

private

  #
  # +build_enviroment_with_a_single_work+: just build a Factory author along with a few works
  #
  def build_enviroment_with_a_single_work
    author = FactoryGirl.create(:author)
    work = FactoryGirl.create(:work)
    author.works << work
    author
  end

end
