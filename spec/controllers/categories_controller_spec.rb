require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe CategoriesController, type: :controller do

  context 'not logged in' do
   
    it 'cannot go anywhere' do
      get :index
      expect(response).to redirect_to(new_admin_account_session_path)
    end

  end

  context 'logged in as normal user' do
   
    login_account

    it 'cannot go anywhere' do
      get :index
      expect(response).to redirect_to(new_admin_account_session_path)
    end

  end

  context 'logged in as administrator' do

    login_admin_account

    before :example do
      @default_categories = Category.all.to_a
    end

    after :example do
      Category.where('id not in (?)', @default_categories.map { |c| c.to_param }).destroy_all
    end

    # This should return the minimal set of attributes required to create a valid
    # Category. As you add validations to Category, be sure to
    # adjust the attributes here as well.
    let(:valid_attributes) {
      HashWithIndifferentAccess.new(acro: Forgery(:basic).text(exactly: 4).upcase,
                                    title_en: Forgery(:lorem_ipsum).sentence,
                                    title_it: Forgery(:lorem_ipsum).sentence,
                                    description_en: Forgery(:lorem_ipsum).sentences(2),
                                    description_it: Forgery(:lorem_ipsum).sentences(2),
      )
    }
  
    let(:invalid_attributes) {
      HashWithIndifferentAccess.new(acro: '',
                                    title_en: '',
                                    title_it: '',
                                    description_en: '',
                                    description_it: '',
      )
    }
  
    # This should return the minimal set of values that should be in the session
    # in order to pass any filters (e.g. authentication) defined in
    # CategoriesController. Be sure to keep this updated too.
    let(:valid_session) { {} }
  
    describe "GET #index" do
      it "assigns all categories as @categories" do
        categories = []; categories.concat(@default_categories)
        category = FactoryGirl.create(:category)
        categories << category
        get :index, {}, valid_session
        expect(assigns(:categories)).to eq(categories)
      end
    end
  
    describe "GET #show" do
      it "assigns the requested category as @category" do
        category = FactoryGirl.create(:category)
        get :show, {:id => category.to_param}, valid_session
        expect(assigns(:category)).to eq(category)
      end
    end
  
    describe "GET #new" do
      it "assigns a new category as @category" do
        get :new, {}, valid_session
        expect(assigns(:category)).to be_a_new(Category)
      end
    end
  
    describe "GET #edit" do
      it "assigns the requested category as @category" do
        category = FactoryGirl.create(:category)
        get :edit, {:id => category.to_param}, valid_session
        expect(assigns(:category)).to eq(category)
      end
    end
  
    describe "POST #create" do
      context "with valid params" do
        it "creates a new Category" do
          expect {
            post :create, {:category => valid_attributes}, valid_session
          }.to change(Category, :count).by(1)
        end
  
        it "assigns a newly created category as @category" do
          post :create, {:category => valid_attributes}, valid_session
          expect(assigns(:category)).to be_a(Category)
          expect(assigns(:category)).to be_persisted
        end
  
        it "redirects to the created category" do
          post :create, {:category => valid_attributes}, valid_session
          expect(response).to redirect_to(Category.last)
        end
      end
  
      context "with invalid params" do
        it "assigns a newly created but unsaved category as @category" do
          post :create, {:category => invalid_attributes}, valid_session
          expect(assigns(:category)).to be_a_new(Category)
        end
  
        it "re-renders the 'new' template" do
          post :create, {:category => invalid_attributes}, valid_session
          expect(response).to redirect_to(new_category_path)
        end
      end
    end
  
    describe "PUT #update" do
      context "with valid params" do
        let(:new_attributes) {
          HashWithIndifferentAccess.new(acro: Forgery(:basic).text(exactly: 4).upcase,
                                        title_en: Forgery(:lorem_ipsum).sentence,
                                        title_it: Forgery(:lorem_ipsum).sentence,
                                        description_en: Forgery(:lorem_ipsum).sentences(2),
                                        description_it: Forgery(:lorem_ipsum).sentences(2),
          )
        }
  
        it "updates the requested category" do
          category = FactoryGirl.create(:category)
          put :update, {:id => category.to_param, :category => new_attributes}, valid_session
          category.reload
          new_attributes.each { |k, v| expect(category.send(k)).to eq(v) }
        end
  
        it "assigns the requested category as @category" do
          category = FactoryGirl.create(:category)
          put :update, {:id => category.to_param, :category => valid_attributes}, valid_session
          expect(assigns(:category)).to eq(category)
        end
  
        it "redirects to the category" do
          category = FactoryGirl.create(:category)
          put :update, {:id => category.to_param, :category => valid_attributes}, valid_session
          expect(response).to redirect_to(category)
        end
      end
  
      context "with invalid params" do
        it "assigns the category as @category" do
          category = FactoryGirl.create(:category)
          put :update, {:id => category.to_param, :category => invalid_attributes}, valid_session
          expect(assigns(:category)).to eq(category)
        end
  
        it "re-renders the 'edit' template" do
          category = FactoryGirl.create(:category)
          put :update, {:id => category.to_param, :category => invalid_attributes}, valid_session
          expect(response).to render_template("edit")
        end
      end
    end
  
    describe "DELETE #destroy" do
      it "destroys the requested category" do
        category = FactoryGirl.create(:category)
        expect {
          delete :destroy, {:id => category.to_param}, valid_session
        }.to change(Category, :count).by(-1)
      end
  
      it "redirects to the categories list" do
        category = FactoryGirl.create(:category)
        delete :destroy, {:id => category.to_param}, valid_session
        expect(response).to redirect_to(categories_url)
      end
    end

  end

end
